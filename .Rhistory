data0$var143 = as.character(data0$var143)
data0$var143 = as.factor(data0$var143)
data0$var143 = as.numeric(data0$var143)
data0$var144 = as.character(data0$var144)
data0$var144 = as.factor(data0$var144)
data0$var144 = as.numeric(data0$var144)
class(data0$var144)
sum(is.na(data0))
###
#below lines for ordered vectors
data0$var141 = as.character(data0$var141)
data0$var141 = factor(data0$var141, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
data0$var141 = as.numeric(data0$var141)
data1 = subset(data0,select = -var141)
data0 = data1
levels(data0$var141)
min(data0$var141)
sum(is.na(data0$var141))
na.exclude(data0$var141)
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
nrow(data0)
for (i in 1:ncol(data0))
{
data0[,i] = as.numeric(data0[,i])
}
#data0 = as.matrix(data0)
posIndx = which(data0$age == 1)
negIndx = which(data0$age == 0)
posIndx
negIndx
tmp1 = sample(1:length(posIndx),2/3*length(posIndx))
postr = sample(tmp1,nrow(data0)/4,replace=T)
negtr = sample(1:length(negIndx),nrow(data0)/4,replace=T)
p1 = data0[posIndx[postr],]
n1 = data0[negIndx[negtr],]
trainData = rbind(p1,n1)
p2 = data0[posIndx[-postr],]
n2 = data0[negIndx[-negtr],]
testData = rbind(p2,n2)
#trainSize = trunc(2*nrow(data0)/3)
#trainSize
#indx = sample(1:nrow(data0),trainSize)
#indx
#trainData = data0[indx,]
#trainData
#testData = data0[-indx,]
#testData
trset = subset(trainData,select=-age)
ncol(trainData)
sum(is.na(trainData))
sum(is.na(testData))
tsSet= subset(testData,select = -age)
svm1 <- svm(trset,trainData[,ncol(trainData)])#,kernel="linear" ,scale=F,
#trControl=trctrl,
#tuneLength=10)
tsSet = as.matrix(tsSet)
pred_test_s <-predict(svm1,tsSet)
pred_test_s = round(pred_test_s)
pred_test_s
pred_train_s = round(predict(svm1,trset))
pred_train_s
##########################################
accuracySVM = sum((pred_test_s==testData$age))/nrow(testData)
accuracySVM
precisionSVM = sum((pred_test_s == 1)&(testData$age == 1))/max(0.0001,sum(testData$age == 1))
precisionSVM
sum(testData$age==1)
length(testData[,21])
Tab = table(pred=pred_train_s[1:59,] , true=testData[,21])
Tab = table(pred=pred_train_s[1:59,] , true=testData[,21])
actual = testData[,ncol(testData)]                              # actual labels
predicted = actual                                              # predicted labels
cm = as.matrix(table(Actual = actual,
Predicted = pred_test_s))    # create the confusion matrix
cm
n = sum(cm)                                        # number of instances
nc = nrow(cm)                                      # number of classes
nc
diag = diag(cm)                                    # number of correctly classified instances per class
diag
accuracy = sum(diag) / n
accuracy
precision = cm[2,2]/(cm[2,1]+cm[2,2])
precision
recall = cm[1,1] / (cm[1,1]+cm[1,2])
recall
f1 = 2 * precision * recall / (precision + recall)
f1
data.frame(precision, recall, f1)
##########################################
#####
##stratified sampling
library(splitstackshape)
############################# SVM #########################################
library(readxl)
pretermbirth_0 <- read_excel("D:/pretermbirth-1.xlsx")
#View(pretermbirth_0)
pretermbirth = data.frame(pretermbirth_0)
ncol(pretermbirth)
typeof(pretermbirth )
class(pretermbirth)
data0 = pretermbirth
str(data0)
summary(data0)
names(data0)
nrow(data0)
ncol(data0)
age = data0[,"age"]
age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:127){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var136 = as.character(data0$var136)
data0$var136 = as.factor(data0$var136)
data0$var136 = as.numeric(data0$var136)
data0$var137 = as.character(data0$var137)
data0$var137 = as.factor(data0$var137)
data0$var137 = as.numeric(data0$var137)
data0$var138 = as.character(data0$var138)
data0$var138 = as.factor(data0$var138)
data0$var138 = as.numeric(data0$var138)
data0$var139 = as.character(data0$var139)
data0$var139 = as.factor(data0$var139)
data0$var139 = as.numeric(data0$var139)
data0$var140 = as.character(data0$var140)
data0$var140 = as.factor(data0$var140)
data0$var140 = as.numeric(data0$var140)
data0$var142 = as.character(data0$var142)
data0$var142 = as.factor(data0$var142)
data0$var142 = as.numeric(data0$var142)
data0$var143 = as.character(data0$var143)
data0$var143 = as.factor(data0$var143)
data0$var143 = as.numeric(data0$var143)
data0$var144 = as.character(data0$var144)
data0$var144 = as.factor(data0$var144)
data0$var144 = as.numeric(data0$var144)
class(data0$var144)
sum(is.na(data0))
###
#below lines for ordered vectors
data0$var141 = as.character(data0$var141)
data0$var141 = factor(data0$var141, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
data0$var141 = as.numeric(data0$var141)
data1 = subset(data0,select = -var141)
data0 = data1
levels(data0$var141)
min(data0$var141)
sum(is.na(data0$var141))
na.exclude(data0$var141)
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
nrow(data0)
for (i in 1:ncol(data0))
{
data0[,i] = as.numeric(data0[,i])
}
##########################################
#####
##stratified sampling
library(splitstackshape)
data5 =  stratified(data0, c[1:25], .3)
#data0 = as.matrix(data0)
posIndx = which(data0$age == 1)
negIndx = which(data0$age == 0)
posIndx
negIndx
library(DistMap)
install.packages(Distmap)
library(DistMap)
install.packages("Distmap")
library("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
install.packages("ggplot2")
install.packages("ggplot2")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
library(devtools)
install.packages("devtools")
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
install.packages("Distmap")
install_github("rajewsky-lab/DistMap")
install_github("rajewsky-lab/DistMap")
options(repos='http://cran.rstudio.com/')
setwd("D:/computer lessons/arshad/thesis/proposal/code/single-cell-resolution")
# distributed analysis belong x,y,z
geo = read.delim("data/geometry.txt", header = TRUE, sep = " ", dec = ".")
#x
x_ax = geo[1][]
# distributed analysis belong x,y,z
geo = read.delim("data/geometry.txt", header = TRUE, sep = " ", dec = ".")
# distributed analysis belong x,y,z
geo = read.delim("../data/geometry.txt", header = TRUE, sep = " ", dec = ".")
#x
x_ax = geo[1][]
head(x_ax)
typeof(x_ax)
x_ax = as.numeric(unlist(x_ax))
dx = density(x_ax)
plot(dx, main="Kernel Density of cells along x axis")
dev.copy(png,'result/visual/distbuted x.png')
##### visulize  in 3d
#install.packages("rgl")
#install.packages('rgl', dependencies=TRUE, repos='http://cran.rstudio.com/')
library("rgl")
x = as.double(unlist(geo[1][]))
y = as.double(unlist(geo[2][]))
z = as.double(unlist(geo[3][]))
##
#' @param new.device a logical value. If TRUE, creates a new device
#' @param bg the background color of the device
#' @param width the width of the device
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.snapshot("result/visual/3d1.png")
library(magick)
movie3d(spin3d(axis = c(1, 1, 1)), duration = 3,
dir = getwd())
##
rgl.open()# Open a new RGL device
rgl.bg(color = "white") # Setup the background color
rgl.points(x, y, z, color = "blue", size = 5) # Scatter plot
rgl.snapshot("result/visual/3d2.png")
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl.open()# Open a new RGL device
rgl.bg(color = "white") # Setup the background color
rgl.spheres(x, y, z, r = 0.2, color = "grey")
rgl.snapshot("result/visual/3d4.png")
rgl.snapshot("result/visual/3d4.png")
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")  # Scatter plot
rgl.bbox(color = "#333377") # Add bounding box decoration
rgl.snapshot("result/visual/3d6.png")
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
# Add bounding box decoration
rgl.bbox(color=c("#333377","black"), emission="#333377",
specular="#3333FF", shininess=5, alpha=0.8 )
##
# Make a scatter plot
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
# Add x, y, and z Axes
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
##########################################
###############################################feature selection
######first we provide data independently
gen1 = read.delim("../data/bdtnp.txt", header = TRUE, sep = "\t", dec = ".")
geo = read.delim("../data/geometry.txt", header = TRUE, sep = " ", dec = ".")
dim(geo)
typeof(gen1)
head(gen1)
dim(gen1)
feature_selectd = cbind(gen1,geo)
dim(feature_selectd)
head(feature_selectd)
#########feature selections
######by bagging with cart package
# Specify 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
#delete ycoord and zcoord
data_x = feature_selectd
###
##my clustring
# Set seed for reproducibility
set.seed(123)
########################################
###########################################clustring for improve feature selection (bacward forward)
cl_data = feature_selectd
xcoord = cl_data$xcoord
cl_data$xcoord = NULL
cl_data$ycoord =NULL
cl_data$zcoord = NULL
########################################
###########################################clustring for improve feature selection (bacward forward)
cl_data = feature_selectd
xcoord = cl_data$xcoord
ycoord = cl_data$ycoord
zcoord = cl_data$zcoord
cl_data$xcoord = NULL
cl_data$ycoord =NULL
cl_data$zcoord = NULL
mydata = cl_data
dim(mydata)
# Determine number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:84) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:84, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#plot silhouette
require(cluster)
require(factoextra)
fviz_nbclust(mydata, kmeans, method = "silhouette")
##
# K-Means Cluster Analysis
fit <- kmeans(mydata, 4) # 2 cluster solution
# get cluster means
aggregate(mydata,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
mydata$xcoord = xcoord
##only for visulizing this bellow code shoude excute
mydata$ycoord = ycoord
mydata$zcoord = zcoord
#####
out = split(mydata, f= mydata$fit.cluster)
out1 = out[[1]]
out2 = out[[2]]
out3 = out[[3]]
out4 = out[[4]]
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl.open()# Open a new RGL device
rgl.bg(color = "white") # Setup the background color
rgl.spheres(x, y, z, r = 0.2, color = "grey")
rgl.snapshot("result/visual/3d4.png")
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")  # Scatter plot
rgl.bbox(color = "#333377") # Add bounding box decoration
rgl.snapshot("result/visual/3d6.png")
##
# Make a scatter plot
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
# Add x, y, and z Axes
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
##
# Make a scatter plot
rgl.open()
library(magick)
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
dir = getwd())
##
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
# Add bounding box decoration
rgl.bbox(color=c("#333377","black"), emission="#333377",
specular="#3333FF", shininess=5, alpha=0.8 )
##
# Make a scatter plot
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
##
# Make a scatter plot
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
# Add x, y, and z Axes
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
##
# Make a scatter plot
#clsuters
xcl= out$xcoord
xcl
##
# Make a scatter plot
#clsuters
xcl= out1$xcoord
xcl
##
# Make a scatter plot
#clsuters
xcl= out1$xcoord
ycl= out2$ycoord
zcl= out3$zcoord
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
rgl.spheres(xcl, ycl, zcl, r = 0.3, color = "red")
# Add x, y, and z Axes
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
rgl.open()
rgl.spheres(x, y, z, r = 0.2, color = "yellow")
rgl.spheres(xcl, ycl, zcl, r = 0.2, color = "red")
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.snapshot("result/visual/3d1.png")
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl, ycl, zcl, color ="red")
##
# Make a scatter plot
#clsuters
xcl= out1$xcoord
ycl= out1$ycoord
zcl= out1$zcoord
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl, ycl, zcl, color ="red")
rgl.points(xcl, ycl, zcl, color ="red")
xcl
ycl
zcl
rgl.open() # Open a new RGL device
rgl.points(xcl, ycl, zcl, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl, ycl, zcl, color ="red")
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl, ycl, zcl, color ="red")
rgl.points(xcl, ycl, zcl, color ="red")
rgl.snapshot("result/visual/3d1.png")
rgl.points(xcl, ycl, zcl, color ="red")
rgl.snapshot("result/visual/3d1.png")
rgl.points(xcl, ycl, zcl, color ="red")
rgl.open() # Open a new RGL device
rgl.points(xcl, ycl, zcl, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
xcl1= out1$xcoord
ycl1= out1$ycoord
zcl1= out1$zcoord
xcl2= out2$xcoord
ycl2= out2$ycoord
zcl2= out2$zcoord
xcl3= out3$xcoord
ycl3= out3$ycoord
zcl3= out3$zcoord
xcl4= out4$xcoord
ycl4= out4$ycoord
zcl4= out4$zcoord
rgl.open() # Open a new RGL device
rgl.points(xcl2, ycl2, zcl2, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(xcl3, ycl3, zcl3, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(xcl4, ycl4, zcl4, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
##clusters
rgl.points(xcl1, ycl1, zcl1, color ="lightgray")
rgl.points(xcl2, ycl2, zcl2, color ="yellow")
rgl.points(xcl3, ycl3, zcl3, color ="green")
rgl.points(xcl4, ycl4, zcl4, color ="red")
