}
trset$age
#trainSize = trunc(2*nrow(data0)/3)
#trainSize
#indx = sample(1:nrow(data0),trainSize)
#indx
#trainData = data0[indx,]
#trainData
#testData = data0[-indx,]
#testData
trset = subset(trainData,select=-age)
trset
x=0
if(trset$age == 1){
x=x+1
}
if(trset$age == 1){
#x=x+1
}
if(x==0){
x
}
dim(trset)
x=0
for (i in nrow(trset)) {
if(trset[i,116] == 1){
x=x+1
}
}
x
trset[,116]
library(readxl)
pretermbirth_0 <- read_excel("D:/book17.xlsx")
pretermbirth = data.frame(pretermbirth_0)
typeof(pretermbirth )
class(pretermbirth)
data0 = pretermbirth
data0$var129
str(data0)
summary(data0)
names(data0)
nrow(data0)
ncol(data0)
age = data0[,"age"]
age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:116){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
sum(is.na(data0))
data0
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var122 = as.character(data0$var122)
data0$var122 = as.factor(data0$var122)
data0$var122 = as.numeric(data0$var122)
data0$var123 = as.character(data0$var123)
data0$var123 = as.factor(data0$var123)
data0$var123 = as.numeric(data0$var123)
data0$var124 = as.character(data0$var124)
data0$var124 = as.factor(data0$var124)
data0$var124 = as.numeric(data0$var124)
data0$var126 = as.character(data0$var126)
data0$var126 = as.factor(data0$var126)
data0$var126 = as.numeric(data0$var126)
data0$var127 = as.character(data0$var127)
data0$var127 = as.factor(data0$var127)
data0$var127 = as.numeric(data0$var127)
data0$var128 = as.character(data0$var128)
data0$var128 = as.factor(data0$var128)
data0$var128 = as.numeric(data0$var128)
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var122 = as.character(data0$var122)
data0$var122 = as.factor(data0$var122)
data0$var122 = as.numeric(data0$var122)
data0$var123 = as.character(data0$var123)
data0$var123 = as.factor(data0$var123)
data0$var123 = as.numeric(data0$var123)
data0$var124 = as.character(data0$var124)
data0$var124 = as.factor(data0$var124)
data0$var124 = as.numeric(data0$var124)
data0$var126 = as.character(data0$var126)
data0$var126 = as.factor(data0$var126)
data0$var126 = as.numeric(data0$var126)
data0$var127 = as.character(data0$var127)
data0$var127 = as.factor(data0$var127)
data0$var127 = as.numeric(data0$var127)
data0$var128 = as.character(data0$var128)
data0$var128 = as.factor(data0$var128)
data0$var128 = as.numeric(data0$var128)
sum(is.na(data0))
data0
#below lines for ordered vectors
data0$var125 = as.character(data0$var125)
data0$var125 = factor(data0$var125, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
levels(data0$var125)
min(data0$var125)
sum(is.na(data0$var125))
#na.exclude(data0$var141)
#sum(is.na(data0$var141))
#####
#na.exclude(data0$var141)
#sum(is.na(data0$var141))
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
data0
dim(data0)
library(readxl)
pretermbirth_0 <- read_excel("D:/book17.xlsx")
#View(pretermbirth_0)
pretermbirth = data.frame(pretermbirth_0)
typeof(pretermbirth )
class(pretermbirth)
data0 = pretermbirth
data0$var129
str(data0)
summary(data0)
names(data0)
nrow(data0)
ncol(data0)
age = data0[,"age"]
age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:116){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
data0
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var122 = as.character(data0$var122)
data0$var122 = as.factor(data0$var122)
data0$var122 = as.numeric(data0$var122)
data0$var123 = as.character(data0$var123)
data0$var123 = as.factor(data0$var123)
data0$var123 = as.numeric(data0$var123)
data0$var124 = as.character(data0$var124)
data0$var124 = as.factor(data0$var124)
data0$var124 = as.numeric(data0$var124)
data0$var126 = as.character(data0$var126)
data0$var126 = as.factor(data0$var126)
data0$var126 = as.numeric(data0$var126)
data0$var127 = as.character(data0$var127)
data0$var127 = as.factor(data0$var127)
data0$var127 = as.numeric(data0$var127)
data0$var128 = as.character(data0$var128)
data0$var128 = as.factor(data0$var128)
data0$var128 = as.numeric(data0$var128)
sum(is.na(data0))
dim(data0)
sum(is.na(data0))
#na.exclude(data0$var141)
#sum(is.na(data0$var141))
#####
library("e1071")
dim(data0)
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
############################# SVM #########################################
library(readxl)
pretermbirth_0 <- read_excel("D:/pretermbirth-1.xlsx")
#View(pretermbirth_0)
pretermbirth = data.frame(pretermbirth_0)
ncol(pretermbirth)
typeof(pretermbirth )
class(pretermbirth)
data0 = pretermbirth
str(data0)
summary(data0)
names(data0)
nrow(data0)
ncol(data0)
age = data0[,"age"]
age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:127){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var136 = as.character(data0$var136)
data0$var136 = as.factor(data0$var136)
data0$var136 = as.numeric(data0$var136)
data0$var137 = as.character(data0$var137)
data0$var137 = as.factor(data0$var137)
data0$var137 = as.numeric(data0$var137)
data0$var138 = as.character(data0$var138)
data0$var138 = as.factor(data0$var138)
data0$var138 = as.numeric(data0$var138)
data0$var139 = as.character(data0$var139)
data0$var139 = as.factor(data0$var139)
data0$var139 = as.numeric(data0$var139)
data0$var140 = as.character(data0$var140)
data0$var140 = as.factor(data0$var140)
data0$var140 = as.numeric(data0$var140)
data0$var142 = as.character(data0$var142)
data0$var142 = as.factor(data0$var142)
data0$var142 = as.numeric(data0$var142)
data0$var143 = as.character(data0$var143)
data0$var143 = as.factor(data0$var143)
data0$var143 = as.numeric(data0$var143)
data0$var144 = as.character(data0$var144)
data0$var144 = as.factor(data0$var144)
data0$var144 = as.numeric(data0$var144)
class(data0$var144)
sum(is.na(data0))
###
#below lines for ordered vectors
data0$var141 = as.character(data0$var141)
data0$var141 = factor(data0$var141, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
data0$var141 = as.numeric(data0$var141)
data1 = subset(data0,select = -var141)
data0 = data1
levels(data0$var141)
min(data0$var141)
sum(is.na(data0$var141))
na.exclude(data0$var141)
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
nrow(data0)
for (i in 1:ncol(data0))
{
data0[,i] = as.numeric(data0[,i])
}
#data0 = as.matrix(data0)
posIndx = which(data0$age == 1)
negIndx = which(data0$age == 0)
posIndx
negIndx
tmp1 = sample(1:length(posIndx),2/3*length(posIndx))
postr = sample(tmp1,nrow(data0)/4,replace=T)
negtr = sample(1:length(negIndx),nrow(data0)/4,replace=T)
p1 = data0[posIndx[postr],]
n1 = data0[negIndx[negtr],]
trainData = rbind(p1,n1)
p2 = data0[posIndx[-postr],]
n2 = data0[negIndx[-negtr],]
testData = rbind(p2,n2)
#trainSize = trunc(2*nrow(data0)/3)
#trainSize
#indx = sample(1:nrow(data0),trainSize)
#indx
#trainData = data0[indx,]
#trainData
#testData = data0[-indx,]
#testData
trset = subset(trainData,select=-age)
ncol(trainData)
sum(is.na(trainData))
sum(is.na(testData))
tsSet= subset(testData,select = -age)
svm1 <- svm(trset,trainData[,ncol(trainData)])#,kernel="linear" ,scale=F,
#trControl=trctrl,
#tuneLength=10)
tsSet = as.matrix(tsSet)
pred_test_s <-predict(svm1,tsSet)
pred_test_s = round(pred_test_s)
pred_test_s
pred_train_s = round(predict(svm1,trset))
pred_train_s
##########################################
accuracySVM = sum((pred_test_s==testData$age))/nrow(testData)
accuracySVM
precisionSVM = sum((pred_test_s == 1)&(testData$age == 1))/max(0.0001,sum(testData$age == 1))
precisionSVM
sum(testData$age==1)
length(testData[,21])
Tab = table(pred=pred_train_s[1:59,] , true=testData[,21])
Tab = table(pred=pred_train_s[1:59,] , true=testData[,21])
actual = testData[,ncol(testData)]                              # actual labels
predicted = actual                                              # predicted labels
cm = as.matrix(table(Actual = actual,
Predicted = pred_test_s))    # create the confusion matrix
cm
n = sum(cm)                                        # number of instances
nc = nrow(cm)                                      # number of classes
nc
diag = diag(cm)                                    # number of correctly classified instances per class
diag
accuracy = sum(diag) / n
accuracy
precision = cm[2,2]/(cm[2,1]+cm[2,2])
precision
recall = cm[1,1] / (cm[1,1]+cm[1,2])
recall
f1 = 2 * precision * recall / (precision + recall)
f1
data.frame(precision, recall, f1)
##########################################
#####
##stratified sampling
library(splitstackshape)
############################# SVM #########################################
library(readxl)
pretermbirth_0 <- read_excel("D:/pretermbirth-1.xlsx")
#View(pretermbirth_0)
pretermbirth = data.frame(pretermbirth_0)
ncol(pretermbirth)
typeof(pretermbirth )
class(pretermbirth)
data0 = pretermbirth
str(data0)
summary(data0)
names(data0)
nrow(data0)
ncol(data0)
age = data0[,"age"]
age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:127){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var136 = as.character(data0$var136)
data0$var136 = as.factor(data0$var136)
data0$var136 = as.numeric(data0$var136)
data0$var137 = as.character(data0$var137)
data0$var137 = as.factor(data0$var137)
data0$var137 = as.numeric(data0$var137)
data0$var138 = as.character(data0$var138)
data0$var138 = as.factor(data0$var138)
data0$var138 = as.numeric(data0$var138)
data0$var139 = as.character(data0$var139)
data0$var139 = as.factor(data0$var139)
data0$var139 = as.numeric(data0$var139)
data0$var140 = as.character(data0$var140)
data0$var140 = as.factor(data0$var140)
data0$var140 = as.numeric(data0$var140)
data0$var142 = as.character(data0$var142)
data0$var142 = as.factor(data0$var142)
data0$var142 = as.numeric(data0$var142)
data0$var143 = as.character(data0$var143)
data0$var143 = as.factor(data0$var143)
data0$var143 = as.numeric(data0$var143)
data0$var144 = as.character(data0$var144)
data0$var144 = as.factor(data0$var144)
data0$var144 = as.numeric(data0$var144)
class(data0$var144)
sum(is.na(data0))
###
#below lines for ordered vectors
data0$var141 = as.character(data0$var141)
data0$var141 = factor(data0$var141, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
data0$var141 = as.numeric(data0$var141)
data1 = subset(data0,select = -var141)
data0 = data1
levels(data0$var141)
min(data0$var141)
sum(is.na(data0$var141))
na.exclude(data0$var141)
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
nrow(data0)
for (i in 1:ncol(data0))
{
data0[,i] = as.numeric(data0[,i])
}
##########################################
#####
##stratified sampling
library(splitstackshape)
data5 =  stratified(data0, c[1:25], .3)
#data0 = as.matrix(data0)
posIndx = which(data0$age == 1)
negIndx = which(data0$age == 0)
posIndx
negIndx
library(DistMap)
install.packages(Distmap)
library(DistMap)
install.packages("Distmap")
library("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
install.packages("ggplot2")
install.packages("ggplot2")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
library(devtools)
install.packages("devtools")
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
install.packages("Distmap")
install_github("rajewsky-lab/DistMap")
install_github("rajewsky-lab/DistMap")
options(repos='http://cran.rstudio.com/')
setwd("D:/computer lessons/arshad/thesis/proposal/code/single-cell-resolution")
##########################################
###############################################feature selection
######first we provide data independently
gen1 = read.delim("data/bdtnp.txt", header = TRUE, sep = "\t", dec = ".")
##########################################
###############################################feature selection
######first we provide data independently
gen1 = read.delim("../data/bdtnp.txt", header = TRUE, sep = "\t", dec = ".")
geo = read.delim("../data/geometry.txt", header = TRUE, sep = " ", dec = ".")
dim(geo)
typeof(gen1)
head(gen1)
dim(gen1)
feature_selectd = cbind(gen1,geo)
dim(feature_selectd)
head(feature_selectd)
#########feature selections
######by bagging with cart package
# Specify 10-fold cross validation
ctrl <- trainControl(method = "cv",  number = 10)
#delete ycoord and zcoord
data_x = feature_selectd
data_x$ycoord = NULL
data_x$zcoord = NULL
dim(data_x)
# CV bagged model
bagged_cv = train(
xcoord ~ .,
data = data_x,
method = "treebag",
trControl = ctrl,
importance = TRUE
)
##########feature selection by sequencatial backward forward selection
#####http://www.sthda.com/english/articles/37-model-selection-essentials-in-r/154-stepwise-regression-essentials-in-r/
###
library(caret)
library(leaps)
library(MASS)
data_x = feature_selectd
head(data_x)
data_x$ycoord = NULL
data_x$zcoord = NULL
dim(data_x)
# Fit the full model
full.model <- lm(xcoord ~., data = data_x)
summary(full.model)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
###
models <- regsubsets(xcoord ~., data = data_x, nvmax = 5,
method = "seqrep")
summary(models)
#######
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(xcoord ~., data = data_x,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
