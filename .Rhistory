age = (age < 37)
age
data0$age <- age
class(data0$age)
data0$age = as.numeric(data0$age)    #numeric the class label
class(data0$age)
data0$age
for(i in 1:127){
data0[,i] =as.numeric(data0[,i])
}
sum(is.na(data0))
data0 = na.exclude(data0)
#trainD1$var136 = as.numeric(trainD1$var136)
data0$var136 = as.character(data0$var136)
data0$var136 = as.factor(data0$var136)
data0$var136 = as.numeric(data0$var136)
data0$var137 = as.character(data0$var137)
data0$var137 = as.factor(data0$var137)
data0$var137 = as.numeric(data0$var137)
data0$var138 = as.character(data0$var138)
data0$var138 = as.factor(data0$var138)
data0$var138 = as.numeric(data0$var138)
data0$var139 = as.character(data0$var139)
data0$var139 = as.factor(data0$var139)
data0$var139 = as.numeric(data0$var139)
data0$var140 = as.character(data0$var140)
data0$var140 = as.factor(data0$var140)
data0$var140 = as.numeric(data0$var140)
data0$var142 = as.character(data0$var142)
data0$var142 = as.factor(data0$var142)
data0$var142 = as.numeric(data0$var142)
data0$var143 = as.character(data0$var143)
data0$var143 = as.factor(data0$var143)
data0$var143 = as.numeric(data0$var143)
data0$var144 = as.character(data0$var144)
data0$var144 = as.factor(data0$var144)
data0$var144 = as.numeric(data0$var144)
class(data0$var144)
sum(is.na(data0))
###
#below lines for ordered vectors
data0$var141 = as.character(data0$var141)
data0$var141 = factor(data0$var141, levels = c("m","a","b","c","d","e","f","g","i","j","k"), ordered = TRUE)
data0$var141 = as.numeric(data0$var141)
data1 = subset(data0,select = -var141)
data0 = data1
levels(data0$var141)
min(data0$var141)
sum(is.na(data0$var141))
na.exclude(data0$var141)
#####
library("e1071")
data0 = na.exclude(data0)
data0 = data.frame(data0)
ncol(data0)
nrow(data0)
for (i in 1:ncol(data0))
{
data0[,i] = as.numeric(data0[,i])
}
##########################################
#####
##stratified sampling
library(splitstackshape)
data5 =  stratified(data0, c[1:25], .3)
#data0 = as.matrix(data0)
posIndx = which(data0$age == 1)
negIndx = which(data0$age == 0)
posIndx
negIndx
library(DistMap)
install.packages(Distmap)
library(DistMap)
install.packages("Distmap")
library("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
install.packages("ggplot2")
install.packages("ggplot2")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("ggplot2")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
library(devtools)
install.packages("devtools")
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
library(devtools)
install_github("rajewsky-lab/DistMap")
install.packages("Distmap")
install_github("rajewsky-lab/DistMap")
install_github("rajewsky-lab/DistMap")
options(repos='http://cran.rstudio.com/')
setwd("D:/computer lessons/arshad/thesis/proposal/code/single-cell-resolution")
##########################################
###############################################feature selection
######first we provide data independently
gen1 = read.delim("../data/bdtnp.txt", header = TRUE, sep = "\t", dec = ".")
geo = read.delim("../data/geometry.txt", header = TRUE, sep = " ", dec = ".")
dim(geo)
typeof(gen1)
head(gen1)
dim(gen1)
feature_selectd = cbind(gen1,geo)
dim(feature_selectd)
cl_data = feature_selectd
xcoord = cl_data$xcoord
ycoord = cl_data$ycoord
zcoord = cl_data$zcoord
cl_data$xcoord = NULL
cl_data$ycoord =NULL
cl_data$zcoord = NULL
mydata = cl_data
library(Rtsne)
library(caret)
data_tsne = mydata
## Rtsne function may take some minutes to complete...
set.seed(9)
tsne_model_1 = Rtsne(as.matrix(data_tsne), check_duplicates=FALSE, pca=TRUE, perplexity=25, theta=0.5, dims=2)
## getting the two dimension matrix
d_tsne_1 = as.data.frame(tsne_model_1$Y)
## plotting the results without clustering
ggplot(d_tsne_1, aes(x=V1, y=V2)) +
geom_point(size=0.25) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("t-SNE") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank()) +
scale_colour_brewer(palette = "Set2")
## keeping original data
d_tsne_1_original=d_tsne_1
## Creating k-means clustering model, and assigning the result to the data used to create the tsne
#plot silhouette
require(cluster)
require(factoextra)
fviz_nbclust(d_tsne_1, kmeans, method = "silhouette")
fviz_nbclust(d_tsne_1, hcut, method = "silhouette")
fit_cluster_kmeans=kmeans(scale(d_tsne_1), 5)
d_tsne_1_original$cl_kmeans = factor(fit_cluster_kmeans$cluster)
## Creating hierarchical cluster model, and assigning the result to the data used to create the tsne
fit_cluster_hierarchical=hclust(dist(scale(d_tsne_1)))
## setting 3 clusters as output
d_tsne_1_original$cl_hierarchical = factor(cutree(fit_cluster_hierarchical, k=5))
plot_cluster=function(data, var_cluster, palette)
{
ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
geom_point(size=0.25) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_colour_brewer(palette = palette)
}
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
## and finally: putting the plots side by side with gridExtra lib...
library(gridExtra)
grid.arrange(plot_k, plot_h,  ncol=2)
plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
png()
dev.off()
png(filename="tsne_kmeans_5_cluster.png")
plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
dev.off()
png(filename="../clsuter_shape/tsne_kmeans_5_cluster.png")
plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
dev.off()
png(filename="../clsuter_shape/tsne_hirechixal_5_cluster.png")
plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
dev.off()
png(filename="../clsuter_shape/tsne_kmeans vs hierachiacal_5_cluster.png")
grid.arrange(plot_k, plot_h,  ncol=2)
dev.off()
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
####split clusters
mydata = d_tsne_1_original
dim(mydata)
head(mydata)
mydata2 = data_tsne
head(mydata2)
dim(mydata2)
head(mydata)
####split clusters
mydata2 = d_tsne_1_original
dim(mydata2)
head(mydata2)
mydata = data_tsne
dim(mydata)
mydata$cl_kmeans = mydata2$cl_kmeans
mydata$xcoord = xcoord
#####
out = split(mydata, f= mydata$cl_kmeans)
out1 = out[[1]]
out2 = out[[2]]
out3 = out[[3]]
out4 = out[[4]]
out5 = out[[5]]
dim(out)
dim(out1)
typeof(out)
out1$cl_kmeans = NULL
dim(out1)
out2$cl_kmeans = NULL
out3$cl_kmeans = NULL
out4$cl_kmeans = NULL
out5$cl_kmeans = NULL
dim(out1)
dim(out2)
dim(out3)
dim(out4)
dim(out5)
#######
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(xcoord ~., data = out1,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
step.model$bestTune
dim(out1)
# Train the model
step.model <- train(xcoord ~., data = out2,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
step.model$bestTune
dim(out2)
# Train the model
step.model <- train(xcoord ~., data = out3,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
step.model$bestTune
dim(out3)
# Train the model
step.model <- train(xcoord ~., data = out4,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
step.model$bestTune
dim(out4)
# Train the model
step.model <- train(xcoord ~., data = out5,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:85),
trControl = train.control
)
step.model$results
step.model$bestTune
dim(out5)
dim(xcoord)
dim(mydata)
###gradian boosting tree
library("e1071")
library("plyr")
library("ipred")
library(xgboost)
param <-  data.frame(nrounds=c(1000), max_depth = c(2),eta =c(0.3),gamma=c(0),
colsample_bytree=c(0.8),min_child_weight=c(1),subsample=c(1))
#### method = 'xgbDART'
param <-  data.frame(nrounds=c(1000), max_depth = c(4),eta =c(0.3),gamma=c(0),
colsample_bytree=c(0.8),min_child_weight=c(1),subsample=c(1),rate_drop = c(0.2),
skip_drop = c(0.2))
#### method = 'xgbDART'
param <-  data.frame(nrounds=c(1000), max_depth = c(2),eta =c(0.3),gamma=c(0),
colsample_bytree=c(0.8),min_child_weight=c(1),subsample=c(1),rate_drop = c(0.2),
skip_drop = c(0.2))
step.model <- train(xcoord ~., data = out1,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model$results
step.model$bestTune
step.model <- train(xcoord ~., data = out2,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out3,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out4,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out5,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
#### method = 'xgbDART'
param <-  data.frame(nrounds=c(1000), max_depth = c(4),eta =c(0.3),gamma=c(0),
colsample_bytree=c(0.8),min_child_weight=c(1),subsample=c(1),rate_drop = c(0.2),
skip_drop = c(0.2))
step.model <- train(xcoord ~., data = out1,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out2,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out3,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out4,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out5,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
#### method = 'xgbDART'
param <-  data.frame(nrounds=c(1000), max_depth = c(8),eta =c(0.3),gamma=c(0),
colsample_bytree=c(0.8),min_child_weight=c(1),subsample=c(1),rate_drop = c(0.2),
skip_drop = c(0.2))
step.model <- train(xcoord ~., data = out1,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out2,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out3,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out4,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
step.model <- train(xcoord ~., data = out5,
method = "xgbDART",
tuneGrid = param,
trControl = train.control
)
step.model$results
#clsuters
xcl1= out1$xcoord
ycl1= out1$ycoord
zcl1= out1$zcoord
xcl2= out2$xcoord
ycl2= out2$ycoord
zcl2= out2$zcoord
xcl3= out3$xcoord
ycl3= out3$ycoord
zcl3= out3$zcoord
xcl4= out4$xcoord
ycl4= out4$ycoord
zcl4= out4$zcoord
xcl5= out5$xcoord
ycl5= out5$ycoord
zcl5= out5$zcoord
##### visulize  in 3d
#install.packages("rgl")
#install.packages('rgl', dependencies=TRUE, repos='http://cran.rstudio.com/')
library("rgl")
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
x = as.double(unlist(geo[1][]))
y = as.double(unlist(geo[2][]))
z = as.double(unlist(geo[3][]))
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl1, ycl1, zcl1, color ="lightgray")
rgl.points(xcl1, ycl1, zcl1, color ="lightgray")
rgl.points(xcl2, ycl2, zcl2, color ="yellow")
rgl.points(xcl3, ycl3, zcl3, color ="green")
rgl.points(xcl4, ycl4, zcl4, color ="red")
rgl.points(xcl5, ycl5, zcl5, color ="blue")
rgl.open() # Open a new RGL device
rgl.points(xcl1, ycl1, zcl1, color ="lightgray")
rgl.points(xcl2, ycl2, zcl2, color ="yellow")
xcl1
ycl1
zcl1
mydata2 = d_tsne_1_original
dim(mydata2)
head(mydata2)
mydata = data_tsne
head(mydata)
dim(mydata)
mydata$cl_kmeans = mydata2$cl_kmeans
mydata$xcoord = xcoord
##only for visulizing this bellow code shoude excute
mydata$ycoord = ycoord
mydata$zcoord = zcoord
#####
out = split(mydata, f= mydata$cl_kmeans)
out1 = out[[1]]
out1$cl_kmeans = NULL
out2 = out[[2]]
out2$cl_kmeans = NULL
out3 = out[[3]]
out3$cl_kmeans = NULL
out4 = out[[4]]
out4$cl_kmeans = NULL
out5 = out[[5]]
out5$cl_kmeans = NULL
ycl1
#clsuters
xcl1= out1$xcoord
ycl1= out1$ycoord
zcl1= out1$zcoord
xcl2= out2$xcoord
ycl2= out2$ycoord
zcl2= out2$zcoord
xcl3= out3$xcoord
ycl3= out3$ycoord
zcl3= out3$zcoord
xcl4= out4$xcoord
ycl4= out4$ycoord
zcl4= out4$zcoord
xcl5= out5$xcoord
ycl5= out5$ycoord
zcl5= out5$zcoord
zcl5
rgl.open() # Open a new RGL device
rgl.points(xcl1, ycl1, zcl1, color ="lightgray")
rgl.points(xcl2, ycl2, zcl2, color ="yellow")
rgl.points(xcl3, ycl3, zcl3, color ="green")
rgl.points(xcl4, ycl4, zcl4, color ="red")
rgl.points(xcl5, ycl5, zcl5, color ="blue")
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl1, ycl1, zcl1, color ="red")
rgl.open() # Open a new RGL device
rgl.points(xcl1, ycl1, zcl1, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(xcl2, ycl2, zcl2, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(xcl3, ycl3, zcl3, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.points(xcl4, ycl4, zcl4, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(xcl5, ycl5, zcl5, color ="red")
rgl.points(x, y, z, color ="lightgray") # Scatter plot
